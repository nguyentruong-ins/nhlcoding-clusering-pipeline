problem_slug,submission_id,student_code,code,labels,score
Recursion_17,1311629,2211821,"string findLargestSubsequence(string str1, string str2) {
    int len1 = str1.length();
    int len2 = str2.length();

    // Base case: Nếu một trong hai chuỗi là rỗng, trả về chuỗi rỗng
    if (len1 == 0 || len2 == 0) {
        return """";
    }

    // Nếu ký tự cuối cùng của cả hai chuỗi giống nhau
    if (str1[len1 - 1] == str2[len2 - 1]) {
        // Gọp ký tự cuối cùng vào subsequence và tiếp tục đệ quy với hai chuỗi bỏ ký tự cuối
        return findLargestSubsequence(str1.substr(0, len1 - 1), str2.substr(0, len2 - 1)) + str1[len1 - 1];
    }
    else {
        // Nếu ký tự cuối của cả hai chuỗi không giống nhau, so sánh hai trường hợp:
        // 1. Xóa ký tự cuối của str1 và tìm subsequence chung
        // 2. Xóa ký tự cuối của str2 và tìm subsequence chung
        string subsequence1 = findLargestSubsequence(str1.substr(0, len1 - 1), str2);
        string subsequence2 = findLargestSubsequence(str1, str2.substr(0, len2 - 1));

        // Trả về subsequence có độ dài lớn hơn giữa hai trường hợp trên
        if (subsequence1.length() > subsequence2.length()) {
            return subsequence1;
        }
        else {
            return subsequence2;
        }
    }
}



int superString(string x, string y, int m, int n) {
    string k = findLargestSubsequence(x,y);
    int f= k.length();
    return m+n-f;
}",0,1.0
Recursion_17,1337403,2213250,"int longestSubSeq(string x , string y , int m , int n){
    if(m==0 || n==0) return 0;
    if(x[m-1]==y[n-1]) return 1 + longestSubSeq(x,y,m-1,n-1);
    else return max(longestSubSeq(x,y,m-1,n),longestSubSeq(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return m+n-longestSubSeq(x,y,m,n);
}",1,1.0
Recursion_17,1341365,2211821,"string findLargestSubsequence(string str1, string str2) {
    int len1 = str1.length();
    int len2 = str2.length();

    // Base case: Nếu một trong hai chuỗi là rỗng, trả về chuỗi rỗng
    if (len1 == 0 || len2 == 0) {
        return """";
    }

    // Nếu ký tự cuối cùng của cả hai chuỗi giống nhau
    if (str1[len1 - 1] == str2[len2 - 1]) {
        // Gọp ký tự cuối cùng vào subsequence và tiếp tục đệ quy với hai chuỗi bỏ ký tự cuối
        return findLargestSubsequence(str1.substr(0, len1 - 1), str2.substr(0, len2 - 1)) + str1[len1 - 1];
    }
    else {
        // Nếu ký tự cuối của cả hai chuỗi không giống nhau, so sánh hai trường hợp:
        // 1. Xóa ký tự cuối của str1 và tìm subsequence chung
        // 2. Xóa ký tự cuối của str2 và tìm subsequence chung
        string subsequence1 = findLargestSubsequence(str1.substr(0, len1 - 1), str2);
        string subsequence2 = findLargestSubsequence(str1, str2.substr(0, len2 - 1));

        // Trả về subsequence có độ dài lớn hơn giữa hai trường hợp trên
        if (subsequence1.length() > subsequence2.length()) {
            return subsequence1;
        }
        else {
            return subsequence2;
        }
    }
}



int superString(string x, string y, int m, int n) {
    string k = findLargestSubsequence(x,y);
    int f= k.length();
    return m+n-f;
}",0,1.0
Recursion_17,1349965,2211878,"int superString(string x, string y, int m, int n) {
    if (m == 0) {
        return n;
    }
    if (n == 0) {
        return m;
    }
    if (x[m - 1] == y[n - 1]) {
        return 1 + superString(x, y, m - 1, n - 1);
    } else {
        return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
    }
}",2,1.0
Recursion_17,1353741,2211170,"int superString(const string& x, const string& y, int m, int n) {
    // Base cases
    if (m == 0) return n;
    if (n == 0) return m;

    // If the last characters of x and y are the same, ignore them and recursively find the super string
    if (x[m - 1] == y[n - 1])
        return 1 + superString(x, y, m - 1, n - 1);

    // If the last characters of x and y are different, consider both possibilities:
    // 1. Ignore the last character of x and find the super string of the remaining x and y
    // 2. Ignore the last character of y and find the super string of x and the remaining y
    return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
}",2,1.0
Recursion_17,1355904,2213298,"int max(int x, int y) {
    return (x>y) ? x : y;
}

int lcs(string X, string Y, int m, int n)
{
    if (m == 0 || n == 0) return 0;
    if (X[m - 1] == Y[n - 1]) return lcs(X, Y, m - 1, n - 1) + 1;
    else return max(lcs(X, Y, m, n - 1), lcs(X, Y, m - 1, n));
}

int superString(string X, string Y, int m, int n)
{
    int lcs_length = lcs(X, Y, m, n);
    return m + n - lcs_length;
}",1,1.0
Recursion_17,1366413,2210055,"int superString(string x, string y, int m, int n) {
    if (m == 0)
        return n;
    if (n == 0)
        return m;
    if (x[m - 1] == y[n - 1])
        return 1 + superString(x, y, m - 1, n - 1);
    return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
}",2,1.0
Recursion_17,1366859,2210200,"int findMin(int a, int b){
    if(a <= b) return a;
    else return b;
}

int superString(string x, string y, int m, int n){
    if(m == 0) return n;
    if(n == 0) return m;
    if(x[m - 1] == y[n - 1]) return 1 + superString(x, y, m - 1, n - 1);
    else return 1 + findMin(superString(x, y, m, n - 1), superString(x, y, m - 1, n));
}",2,1.0
Recursion_17,1367267,2210997,"int superString(string x, string y, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;
    if (x[m - 1] == y[n - 1])    return 1 + superString(x, y, m - 1, n - 1);
    return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
}",2,1.0
Recursion_17,1373400,2210535,"int superString(string x, string y, int m, int n) {

    if (m == 0) return n;
    if (n == 0) return m;


    if (x[m - 1] == y[n - 1]) {
        return superString(x, y, m - 1, n - 1) + 1;
    } else {

        return min(
            superString(x, y, m - 1, n) + 1,
            superString(x, y, m, n - 1) + 1
        );
    }
}",2,1.0
Recursion_17,1379936,2211667,"int superString(string x, string y, int m, int n) {
    if (m==0) return n;
    if (n==0) return m;
    if (x[m-1] == y[n-1])
        return 1 + superString(x, y, m-1, n-1);
    else
        return 1 + min(superString(x, y, m-1, n), superString(x, y, m, n-1));
}",2,1.0
Recursion_17,1384903,2210200,"int findMin(int a, int b){
    if(a <= b) return a;
    else return b;
}

int superString(string x, string y, int m, int n){
    if(m == 0) return n;
    if(n == 0) return m;
    if(x[m - 1] == y[n - 1]) return 1 + superString(x, y, m - 1, n - 1);
    else return 1 + findMin(superString(x, y, m, n - 1), superString(x, y, m - 1, n));
}",2,1.0
Recursion_17,1389618,2213248,"int superString(string x, string y, int m, int n) {
    if(m == 0) return n;
    if(n == 0) return m;
    if(x[0] == y[0]) return 1 + superString(x.substr(1), y.substr(1), m - 1, n - 1);
    else {
        int temp1 = superString(x.substr(1), y, m - 1, n);
        int temp2 = superString(x, y.substr(1), m, n - 1);
        if(temp1 > temp2) return 1 + temp2;
        else return 1 + temp1;
    }
}",2,1.0
Recursion_17,1390945,2213250,"int longestSubSeq(string x , string y , int m , int n){
    if(m==0 || n==0) return 0;
    if(x[m-1]==y[n-1]) return 1 + longestSubSeq(x,y,m-1,n-1);
    else return max(longestSubSeq(x,y,m-1,n),longestSubSeq(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return m+n-longestSubSeq(x,y,m,n);
}",1,1.0
Recursion_17,1391249,2213035,"int shortestSuperStringUtil(string x, string y, int m, int n){
    if (m == 0) return n;
    if (n == 0) return m;

    if (x[m - 1] == y[n - 1])   return 1 + shortestSuperStringUtil(x, y, m - 1, n - 1);
    else    return 1 + min(shortestSuperStringUtil(x, y, m - 1, n), shortestSuperStringUtil(x, y, m, n - 1));
}

int superString(string x, string y, int m, int n){
    return shortestSuperStringUtil(x, y, m, n);
}",2,1.0
Recursion_17,1391279,2210578,"int longestSubSeq(string x , string y , int m , int n){
    if(m==0 || n==0) return 0;
    if(x[m-1]==y[n-1]) return 1 + longestSubSeq(x,y,m-1,n-1);
    else return max(longestSubSeq(x,y,m-1,n),longestSubSeq(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return m+n-longestSubSeq(x,y,m,n);
}",1,1.0
Recursion_17,1392194,2212499,"// Function to find length of Longest Common Subsequence of
// sequences `X[0…m-1]` and `Y[0…n-1]`
int LCSLength(string X, string Y, int m, int n)
{
    // return if we have reached the end of either sequence
    if (m == 0 || n == 0) {
        return 0;
    }

    // if last character of `X` and `Y` matches
    if (X[m - 1] == Y[n - 1]) {
        return LCSLength(X, Y, m - 1, n - 1) + 1;
    }

    // else if last character of `X` and `Y` don't match
    return max(LCSLength(X, Y, m, n - 1), LCSLength(X, Y, m - 1, n));
}

// Function to implement Shortest Common Supersequence (SCS) function
int superString(string X, string Y, int m, int n)
{
    // to get length of the shortest supersequence of `X` and `Y`,
    // we take sum of lengths of `X` and `Y` and subtract the
    // length of their Longest Common Subsequence (LCS)
    return m + n - LCSLength(X, Y, m, n);
}",1,1.0
Recursion_17,1402894,2212303,"int superString(string x, string y, int m, int n) {
      if (m == 0) {
        return n; // If the first string is empty, the superstring length is the length of the second string.
    }
    if (n == 0) {
        return m; // If the second string is empty, the superstring length is the length of the first string.
    }
    
    // If the last characters of both strings match, we can merge them and reduce the problem to the rest of the strings.
    if (x[m - 1] == y[n - 1]) {
        return superString(x, y, m - 1, n - 1) + 1;
    } else {
        // If the last characters don't match, we have two options: either append one character from x or one character from y.
        int option1 = superString(x, y, m - 1, n) + 1;
        int option2 = superString(x, y, m, n - 1) + 1;
        return min(option1, option2);
    }
}",2,1.0
Recursion_17,1404222,2213298,"int max(int x, int y) {
    return (x>y) ? x : y;
}

int lcs(string X, string Y, int m, int n)
{
    if (m == 0 || n == 0) return 0;
    if (X[m - 1] == Y[n - 1]) return lcs(X, Y, m - 1, n - 1) + 1;
    else return max(lcs(X, Y, m, n - 1), lcs(X, Y, m - 1, n));
}

int superString(string X, string Y, int m, int n)
{
    int lcs_length = lcs(X, Y, m, n);
    return m + n - lcs_length;
}",1,1.0
Recursion_17,1405513,2211170,"int superString(const string& x, const string& y, int m, int n) {
    // Base cases
    if (m == 0) return n;
    if (n == 0) return m;

    // If the last characters of x and y are the same, ignore them and recursively find the super string
    if (x[m - 1] == y[n - 1])
        return 1 + superString(x, y, m - 1, n - 1);

    // If the last characters of x and y are different, consider both possibilities:
    // 1. Ignore the last character of x and find the super string of the remaining x and y
    // 2. Ignore the last character of y and find the super string of x and the remaining y
    return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
}",2,1.0
Recursion_17,1406072,2013048,"int shortestSuperstring(const string& x, const string& y, int m, int n) {
    if (m == 0) { // x is empty, so the superstring is y
        return n;
    }
    if (n == 0) { // y is empty, so the superstring is x
        return m;
    }
    if (x[m - 1] == y[n - 1]) { // Last characters of x and y are equal
        return 1 + shortestSuperstring(x, y, m - 1, n - 1); // Consider the common character in the superstring
    } else {
        // Find the shortest superstring by considering each string without the last character
        int superstringWithoutLastX = 1 + shortestSuperstring(x, y, m - 1, n); // Consider x without the last character
        int superstringWithoutLastY = 1 + shortestSuperstring(x, y, m, n - 1); // Consider y without the last character
        return min(superstringWithoutLastX, superstringWithoutLastY); // Return the minimum superstring length
    }
}

int superString(const string& x, const string& y, int m, int n) {
    int shortestLength = shortestSuperstring(x, y, m, n);
    return shortestLength;
}",2,1.0
Recursion_17,1407091,2212303,"int superString(string x, string y, int m, int n) {
      if (m == 0) {
        return n; // If the first string is empty, the superstring length is the length of the second string.
    }
    if (n == 0) {
        return m; // If the second string is empty, the superstring length is the length of the first string.
    }
    
    // If the last characters of both strings match, we can merge them and reduce the problem to the rest of the strings.
    if (x[m - 1] == y[n - 1]) {
        return superString(x, y, m - 1, n - 1) + 1;
    } else {
        // If the last characters don't match, we have two options: either append one character from x or one character from y.
        int option1 = superString(x, y, m - 1, n) + 1;
        int option2 = superString(x, y, m, n - 1) + 1;
        return min(option1, option2);
    }
}",2,1.0
Recursion_17,1408640,2210532,"int shortestSuperString(string x, string y, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;
    if (x[m - 1] == y[n - 1]) {
        return 1 + shortestSuperString(x, y, m - 1, n - 1);
    } else {
        return 1 + min(
            shortestSuperString(x, y, m - 1, n),
            shortestSuperString(x, y, m, n - 1)
        );
    }
}
int superString(string x, string y, int m, int n) {
    return shortestSuperString(x, y, m, n);
}",2,1.0
Recursion_17,1409614, ,"int shortestSuperString(string x, string y, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;
    if (x[m - 1] == y[n - 1]) {
        return 1 + shortestSuperString(x, y, m - 1, n - 1);
    } else {
        return 1 + min(
            shortestSuperString(x, y, m - 1, n),
            shortestSuperString(x, y, m, n - 1)
        );
    }
}
int superString(string x, string y, int m, int n) {
    return shortestSuperString(x, y, m, n);
}",2,1.0
Recursion_17,1409645, ,"int shortestSuperString(string x, string y, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;
    if (x[m - 1] == y[n - 1]) {
        return 1 + shortestSuperString(x, y, m - 1, n - 1);
    } else {
        return 1 + min(
            shortestSuperString(x, y, m - 1, n),
            shortestSuperString(x, y, m, n - 1)
        );
    }
}
int superString(string x, string y, int m, int n) {
    return shortestSuperString(x, y, m, n);
}",2,1.0
Recursion_17,1417147,2212651,"int superString(const string& x, const string& y, int m, int n) {
    if (m == 0) return n;
    if (n == 0) return m;
    if (x[m - 1] == y[n - 1]) {
        return 1 + superString(x, y, m - 1, n - 1);
    } else {
        return min(superString(x, y, m - 1, n), superString(x, y, m, n - 1)) + 1;
    }
}",2,1.0
Recursion_17,1418239,2212282,"int lcs(string x, string y, int m, int n) {
    if (m == 0 || n == 0)
        return 0;
    else if (x[m - 1] == y[n - 1])
        return 1 + lcs(x, y, m - 1, n - 1);
    else
        return max(lcs(x, y, m, n - 1), lcs(x, y, m - 1, n));
}

int superString(string x, string y, int m, int n) {
    int len_lcs = lcs(x, y, m, n);
    return (m + n - len_lcs);
}",1,1.0
Recursion_17,1418891,2211821,"string largestsub(string x, string y){
    int len1 = x.length();
    int len2 = y.length();
    if (len1 == 0 || len2 == 0) return """";
    if(x[len1-1] == y[len2-1]) return largestsub(x.substr(0,len1-1),y.substr(0,len2-1)) + x[len1-1];
    else {
        string s1 = largestsub(x.substr(0,len1-1),y);
        string s2 = largestsub(x,y.substr(0,len2-1));
        if(s1.length()>s2.length()) return s1;
        else return s2;
    }
}

int superString(string x, string y, int m, int n) {
    string s = largestsub(x,y);
    int len = s.length();
    return m+n-len;
}",2,1.0
Recursion_17,1420821,2210535,"int superString(string x, string y, int m, int n) {

    if (m == 0) return n;
    if (n == 0) return m;


    if (x[m - 1] == y[n - 1]) {
        return superString(x, y, m - 1, n - 1) + 1;
    } else {

        return min(
            superString(x, y, m - 1, n) + 1,
            superString(x, y, m, n - 1) + 1
        );
    }
}",2,1.0
Recursion_17,1422146,2252260,"int shortestSuperString(string x, string y, int m, int n){
    if(m==0) return n;
    if(n==0) return m;
    
    if(x[m-1] == y[n-1])
        return 1+shortestSuperString(x, y, m-1, n-1);
    else
        return 1 + min(shortestSuperString(x,y,m-1,n), shortestSuperString(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return shortestSuperString(x, y, m, n);
}",2,1.0
Recursion_17,1423412,2213836,"int superString(string x, string y, int m, int n) {
    if(m==0) return n;
    if(n==0) return m;
    if(x[m-1]==y[n-1])
    return 1+superString(x,y,m-1,n-1);
    return 1+ min(superString(x,y,m-1,n),superString(x,y,m,n-1));
}",2,1.0
Recursion_17,1423972,2213248,"int superString(string x, string y, int m, int n) {
    if(m == 0) return n;
    if(n == 0) return m;
    if(x[0] == y[0]) return 1 + superString(x.substr(1), y.substr(1), m - 1, n - 1);
    else {
        int temp1 = superString(x.substr(1), y, m - 1, n);
        int temp2 = superString(x, y.substr(1), m, n - 1);
        if(temp1 > temp2) return 1 + temp2;
        else return 1 + temp1;
    }
}",2,1.0
Recursion_17,1425586,2212372,"int shortestSuperStringUtil(string x, string y, int m, int n){
    if (m == 0) return n;
    if (n == 0) return m;

    if (x[m - 1] == y[n - 1]) return 1 + shortestSuperStringUtil(x, y, m - 1, n - 1);
    else return 1 + min(shortestSuperStringUtil(x, y, m - 1, n), shortestSuperStringUtil(x, y, m, n - 1));
}

int superString(string x, string y, int m, int n){
    return shortestSuperStringUtil(x, y, m, n);
}",2,1.0
Recursion_17,1427875,2210578,"int longestSubSeq(string x , string y , int m , int n){
    if(m==0 || n==0) return 0;
    if(x[m-1]==y[n-1]) return 1 + longestSubSeq(x,y,m-1,n-1);
    else return max(longestSubSeq(x,y,m-1,n),longestSubSeq(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return m+n-longestSubSeq(x,y,m,n);
}",1,1.0
Recursion_17,1428713,2212741,"int shortestSuperStringLength(string x, string y, int i, int j) {
	// Base case: If either string is empty, return the length of the other string
	if (i == 0) {
		return j;
	}
	if (j == 0) {
		return i;
	}

	// If the last characters match, reduce both strings and move one step
	if (x[i - 1] == y[j - 1]) {
		return shortestSuperStringLength(x, y, i - 1, j - 1) + 1;
	}

	// If the last characters don't match, try two options and return the minimum
	int option1 = shortestSuperStringLength(x, y, i - 1, j) + 1;
	int option2 = shortestSuperStringLength(x, y, i, j - 1) + 1;

	return min(option1, option2);
}

int superString(string x, string y, int m, int n) {
	return shortestSuperStringLength(x, y, m, n);
}",2,1.0
Recursion_17,1430523,2210103,"int min(int a, int b) {
    return (a < b) ? a : b;
}

int superStringHelper(const string& x, const string& y, int m, int n) {
    // Base cases
    if (m == 0) return n;
    if (n == 0) return m;

    // If the last characters are the same, consider only one instance of the common character
    if (x[m - 1] == y[n - 1]) {
        return 1 + superStringHelper(x, y, m - 1, n - 1);
    }

    // Otherwise, consider both strings without the last character and choose the minimum
    return 1 + min(superStringHelper(x, y, m - 1, n), superStringHelper(x, y, m, n - 1));
}

int superString(const string& x, const string& y, int m, int n) {
    // Call the helper function
    return superStringHelper(x, y, m, n);
}",2,1.0
Recursion_17,1431468,2252260,"int shortestSuperString(string x, string y, int m, int n){
    if(m==0) return n;
    if(n==0) return m;
    
    if(x[m-1] == y[n-1])
        return 1+shortestSuperString(x, y, m-1, n-1);
    else
        return 1 + min(shortestSuperString(x,y,m-1,n), shortestSuperString(x,y,m,n-1));
}

int superString(string x, string y, int m, int n) {
    return shortestSuperString(x, y, m, n);
}",2,1.0
Recursion_17,1432053,2211878,"int superString(string x, string y, int m, int n) {
    if (m == 0) {
        return n;
    }
    if (n == 0) {
        return m;
    }
    if (x[m - 1] == y[n - 1]) {
        return 1 + superString(x, y, m - 1, n - 1);
    } else {
        return 1 + min(superString(x, y, m - 1, n), superString(x, y, m, n - 1));
    }
}",2,1.0
Recursion_17,1432176,2212741,"int shortestSuperStringLength(string x, string y, int i, int j) {
	// Base case: If either string is empty, return the length of the other string
	if (i == 0) {
		return j;
	}
	if (j == 0) {
		return i;
	}

	// If the last characters match, reduce both strings and move one step
	if (x[i - 1] == y[j - 1]) {
		return shortestSuperStringLength(x, y, i - 1, j - 1) + 1;
	}

	// If the last characters don't match, try two options and return the minimum
	int option1 = shortestSuperStringLength(x, y, i - 1, j) + 1;
	int option2 = shortestSuperStringLength(x, y, i, j - 1) + 1;

	return min(option1, option2);
}

int superString(string x, string y, int m, int n) {
	return shortestSuperStringLength(x, y, m, n);
}",2,1.0
Recursion_17,1432653,2212988,"int shortestSuperStringLength(string x, string y, int i, int j) {
	// Base case: If either string is empty, return the length of the other string
	if (i == 0) {
		return j;
	}
	if (j == 0) {
		return i;
	}

	// If the last characters match, reduce both strings and move one step
	if (x[i - 1] == y[j - 1]) {
		return shortestSuperStringLength(x, y, i - 1, j - 1) + 1;
	}

	// If the last characters don't match, try two options and return the minimum
	int option1 = shortestSuperStringLength(x, y, i - 1, j) + 1;
	int option2 = shortestSuperStringLength(x, y, i, j - 1) + 1;

	return min(option1, option2);
}

int superString(string x, string y, int m, int n) {
	return shortestSuperStringLength(x, y, m, n);
}",2,1.0